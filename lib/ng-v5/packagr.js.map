{"version":3,"file":"packagr.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/packagr.ts"],"names":[],"mappings":";;AACA,+CAA4E;AAC5E,2CAAwD;AACxD,8CAAuD;AACvD,sDAAkD;AAGlD,mCAAmC;AACnC,8DAA0D;AAC1D,qDAAyD;AACzD,6CAAoE;AACpE,6CAA8C;AAE9C;;;;;;GAMG;AACH;IAGE,YAAoB,SAAqB;QAArB,cAAS,GAAT,SAAS,CAAY;QAFjC,mBAAc,GAA8B,8BAAiB,CAAC,OAAO,CAAC;IAElC,CAAC;IAE7C;;;;;OAKG;IACI,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,SAAqB;QACxC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,SAAS,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,aAAgC;QAClD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kCAAe,CAAC,aAAa,CAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,SAAoC;QAC5D,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,KAAK;QACV,MAAM,QAAQ,GAAG,iCAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrE,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEjE,MAAM,CAAC,OAAY,CAAC,IAAI,wBAAU,EAAE,CAAC;aAClC,IAAI,CACH,sBAAsB,EACtB,gBAAI,CAAC,CAAC,CAAC,EACP,sBAAU,CAAC,GAAG,CAAC,EAAE;YACf,2CAA2C;YAC3C,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACf,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC,EACF,eAAG,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CACd;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;CACF;AA5ED,8BA4EC;AAEY,QAAA,SAAS,GAAG,GAAc,EAAE,CACvC,IAAI,SAAS,CAAC;IACZ,sCAAsC;IACtC,GAAG,8BAAiB;IACpB,GAAG,sCAAqB;CACzB,CAAC,CAAC","sourcesContent":["import { ParsedConfiguration } from '@angular/compiler-cli';\r\nimport { InjectionToken, Provider, ReflectiveInjector } from 'injection-js';\r\nimport { of as observableOf } from 'rxjs/observable/of';\r\nimport { take, map, catchError } from 'rxjs/operators';\r\nimport { BuildGraph } from '../brocc/build-graph';\r\nimport { Transform } from '../brocc/transform';\r\nimport { TsConfig } from '../ts/tsconfig';\r\nimport * as log from '../util/log';\r\nimport { provideTsConfig } from './init/init-tsconfig.di';\r\nimport { ENTRY_POINT_PROVIDERS } from './entry-point.di';\r\nimport { PACKAGE_TRANSFORM, PACKAGE_PROVIDERS } from './package.di';\r\nimport { provideProject } from './project.di';\r\n\r\n/**\r\n * The original ng-packagr implemented on top of a rxjs-ified and di-jectable transformation pipeline.\r\n *\r\n * See the `docs/transformations.md` for more prose description.\r\n *\r\n * @link https://github.com/dherges/ng-packagr/pull/572\r\n */\r\nexport class NgPackagr {\r\n  private buildTransform: InjectionToken<Transform> = PACKAGE_TRANSFORM.provide;\r\n\r\n  constructor(private providers: Provider[]) {}\r\n\r\n  /**\r\n   * Sets the path to the user's \"ng-package\" file (either `package.json`, `ng-package.json`, or `ng-package.js`)\r\n   *\r\n   * @param project File path\r\n   * @return Self instance for fluent API\r\n   */\r\n  public forProject(project: string): NgPackagr {\r\n    this.providers.push(provideProject(project));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds dependency injection providers.\r\n   *\r\n   * @param providers\r\n   * @return Self instance for fluent API\r\n   * @link https://github.com/mgechev/injection-js\r\n   */\r\n  public withProviders(providers: Provider[]): NgPackagr {\r\n    this.providers = [...this.providers, ...providers];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the default TypeScript configuration.\r\n   *\r\n   * @param defaultValues A tsconfig providing default values to the compilation.\r\n   * @return Self instance for fluent API\r\n   */\r\n  public withTsConfig(defaultValues: TsConfig | string): NgPackagr {\r\n    this.providers.push(provideTsConfig(defaultValues));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Overwrites the 'build' transform.\r\n   *\r\n   * @param transform\r\n   * @return Self intance for fluent API\r\n   */\r\n  public withBuildTransform(transform: InjectionToken<Transform>): NgPackagr {\r\n    this.buildTransform = transform;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds the project by kick-starting the 'build' transform over an (initially) empty `BuildGraph``\r\n   *\r\n   * @return A promisified result of the transformation pipeline.\r\n   */\r\n  public build(): Promise<void> {\r\n    const injector = ReflectiveInjector.resolveAndCreate(this.providers);\r\n    const buildTransformOperator = injector.get(this.buildTransform);\r\n\r\n    return observableOf(new BuildGraph())\r\n      .pipe(\r\n        buildTransformOperator,\r\n        take(1),\r\n        catchError(err => {\r\n          // Report error and re-throw to subscribers\r\n          log.error(err);\r\n          throw err;\r\n        }),\r\n        map(() => {})\r\n      )\r\n      .toPromise();\r\n  }\r\n}\r\n\r\nexport const ngPackagr = (): NgPackagr =>\r\n  new NgPackagr([\r\n    // Add default providers to this list.\r\n    ...PACKAGE_PROVIDERS,\r\n    ...ENTRY_POINT_PROVIDERS\r\n  ]);\r\n"]}