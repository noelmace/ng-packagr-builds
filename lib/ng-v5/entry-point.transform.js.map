{"version":3,"file":"entry-point.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/entry-point.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAA+C;AAC/C,wCAA2C;AAC3C,4CAA+C;AAC/C,kDAAqE;AACrE,mCAAmC;AACnC,mCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACU,QAAA,0BAA0B,GAAG,CACxC,iBAA4B,EAC5B,eAA0B,EAC1B,kBAA6B,EAC7B,SAAoB,EACpB,WAAsB,EACtB,YAAuB,EACvB,eAA0B,EAC1B,kBAA6B,EAC7B,YAAuB,EACZ,EAAE,CACb,oBAAa,CAAC;IACZ,+DAA+D;IAE/D,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;QACjC,4CAA4C;QAC5C,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;QAChE,GAAG,CAAC,IAAI,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC;IACF,oCAAoC;IACpC,iBAAiB;IACjB,eAAe;IACf,wCAAwC;IACxC,kBAAkB;IAClB,iCAAiC;IACjC,SAAS;IACT,0BAA0B;IAC1B,WAAW;IACX,+CAA+C;IAC/C,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,YAAY;IAEZ,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;QACjC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAY,EAAE,CAAC,GAAG,CAAC,qBAAY,CAAC,CAAC,CAAC;QAChE,UAAU,CAAC,KAAK,GAAG,iBAAU,CAAC;IAChC,CAAC,CAAA,CAAC;IAEF,+BAA+B;CAChC,CAAC,CAAC","sourcesContent":["import { pipeFromArray } from 'rxjs/util/pipe';\r\nimport { STATE_DONE } from '../brocc/node';\r\nimport { isInProgress } from '../brocc/select';\r\nimport { Transform, transformFromPromise } from '../brocc/transform';\r\nimport * as log from '../util/log';\r\nimport { byEntryPoint } from './nodes';\r\n\r\n/**\r\n * A re-write of the `transformSources()` script that transforms an entry point from sources to distributable format.\r\n *\r\n * Sources are TypeScript source files accompanied by HTML templates and xCSS stylesheets.\r\n * See the Angular Package Format for a detailed description of what the distributables include.\r\n *\r\n * The current transformation pipeline can be thought of as:\r\n *\r\n *  - clean\r\n *  - renderTemplates\r\n *  - renderStylesheets\r\n *  - transformTsSources (thereby inlining template and stylesheet data)\r\n *  - compileTs\r\n *  - downlevelTs\r\n *  - writeBundles\r\n *    - bundleToFesm15\r\n *    - bundleToFesm5\r\n *    - bundleToUmd\r\n *    - bundleToUmdMin\r\n *  - relocateSourceMaps\r\n *  - writePackage\r\n *   - copyStagedFiles (bundles, esm, dts, metadata, sourcemaps)\r\n *   - writePackageJson\r\n *\r\n * The transformation pipeline is pluggable through the dependency injection system.\r\n * Sub-transformations are passed to this factory function as arguments.\r\n *\r\n * @param renderTemplates Transformation rendering HTML templates.\r\n * @param renderStylesheets Transformation rendering xCSS stylesheets.\r\n * @param transformTsSources Transformation manipulating the typescript source files (thus inlining template and stylesheet data).\r\n * @param compileTs Transformation compiling typescript sources to ES2015 modules.\r\n * @param downlevelTs Transformation downlevel compilation from ES2015 TO ESM5.\r\n * @param writeBundles Transformation flattening ES2015 modules to ESM2015, ESM5, UMD, and minified UMD.\r\n * @param remapSourceMaps Transformation re-mapping of sourcemaps over a series of transpilations.\r\n * @param relocateSourceMaps Transformation re-locating (adapting) paths in the source maps.\r\n * @param writePackage Transformation writing a distribution-ready `package.json` (for publishing to npm registry).\r\n */\r\nexport const entryPointTransformFactory = (\r\n  renderStylesheets: Transform,\r\n  renderTemplates: Transform,\r\n  transformTsSources: Transform,\r\n  compileTs: Transform,\r\n  downlevelTs: Transform,\r\n  writeBundles: Transform,\r\n  remapSourceMaps: Transform,\r\n  relocateSourceMaps: Transform,\r\n  writePackage: Transform\r\n): Transform =>\r\n  pipeFromArray([\r\n    //tap(() => log.info(`Building from sources for entry point`)),\r\n\r\n    transformFromPromise(async graph => {\r\n      // Peek the first entry point from the graph\r\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\r\n      log.info(`Building entry point '${entryPoint.data.entryPoint.moduleId}'`);\r\n    }),\r\n    // Stylesheet and template rendering\r\n    renderStylesheets,\r\n    renderTemplates,\r\n    // Inlining of stylesheets and templates\r\n    transformTsSources,\r\n    // TypeScript sources compilation\r\n    compileTs,\r\n    // Downlevel es2015 to es5\r\n    downlevelTs,\r\n    // After TypeScript: bundling and write package\r\n    writeBundles,\r\n    remapSourceMaps,\r\n    relocateSourceMaps,\r\n    writePackage,\r\n\r\n    transformFromPromise(async graph => {\r\n      const entryPoint = graph.find(byEntryPoint().and(isInProgress));\r\n      entryPoint.state = STATE_DONE;\r\n    })\r\n\r\n    //tap(() => log.info(`Built.`))\r\n  ]);\r\n"]}