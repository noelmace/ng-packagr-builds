{"version":3,"file":"transform-sources.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/transform-sources.transform.ts"],"names":[],"mappings":";;AAAA,8CAAqC;AACrC,yCAAsC;AAEtC,yCAAyC;AACzC,gFAA2E;AAC3E,mFAAqF;AACrF,uCAMqB;AAER,QAAA,yBAAyB,GAAc,WAAI,CACtD,eAAG,CAAC,KAAK,CAAC,EAAE;IACV,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,GAAG,CAAC,KAAK,CAAC,uCAAuC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAExF,mDAAmD;IACnD,MAAM,eAAe,GAAG,wDAA6B,CAAC;QACpD,QAAQ,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE;YACjC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,eAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACtF,CAAC;QACD,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;YAChC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,eAAO,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;QACnF,CAAC;KACF,CAAC,CAAC;IAEH,wBAAwB;IACxB,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,2BAAmB,CAAyB,CAAC;IAC/E,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC;IAEzC,qCAAqC;IACrC,SAAS,CAAC,IAAI,GAAG,6CAAoB,CAAC,iBAAiB,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAE5E,6CAA6C;IAC7C,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAE5B,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\r\nimport { pipe } from 'rxjs/util/pipe';\r\nimport { Transform } from '../../../brocc/transform';\r\nimport * as log from '../../../util/log';\r\nimport { transformSourceFiles } from '../../../ngc/transform-source-files';\r\nimport { transformComponentSourceFiles } from '../../../ts/ng-component-transformer';\r\nimport {\r\n  isEntryPointInProgress,\r\n  fileUrl,\r\n  isTypeScriptSources,\r\n  TypeScriptSourceNode,\r\n  EntryPointNode\r\n} from '../../nodes';\r\n\r\nexport const transformSourcesTransform: Transform = pipe(\r\n  map(graph => {\r\n    const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\r\n    log.debug(`Transforming TypeScript sources for ${entryPoint.data.entryPoint.moduleId}`);\r\n\r\n    // Transformer that inlines template and style data\r\n    const inlineResources = transformComponentSourceFiles({\r\n      template: ({ templateFilePath }) => {\r\n        return entryPoint.find(node => node.url === fileUrl(templateFilePath)).data.content;\r\n      },\r\n      stylesheet: ({ styleFilePath }) => {\r\n        return entryPoint.find(node => node.url === fileUrl(styleFilePath)).data.content;\r\n      }\r\n    });\r\n\r\n    // TypeScriptSourcesNode\r\n    const tsSources = entryPoint.find(isTypeScriptSources) as TypeScriptSourceNode;\r\n    const previousTransform = tsSources.data;\r\n\r\n    // Modify the TypeScript source files\r\n    tsSources.data = transformSourceFiles(previousTransform, [inlineResources]);\r\n\r\n    // Dispose the previous transformation result\r\n    previousTransform.dispose();\r\n\r\n    return graph;\r\n  })\r\n);\r\n"]}