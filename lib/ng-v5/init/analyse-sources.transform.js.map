{"version":3,"file":"analyse-sources.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-v5/init/analyse-sources.transform.ts"],"names":[],"mappings":";;AAAA,8CAAqC;AACrC,yCAAsC;AACtC,sCAAsC;AAEtC,6EAAwE;AACxE,gGAAgF;AAChF,gFAAkF;AAClF,oCAA4G;AAE/F,QAAA,uBAAuB,GAAc,WAAI,CACpD,eAAG,CAAC,KAAK,CAAC,EAAE;IACV,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;IAC/C,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,WAAW,CAAC,CAAC,CAAC;QACnC,GAAG,CAAC,KAAK,CAAC,yBAAyB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1E,yEAAyE;QACzE,MAAM,gBAAgB,GAAG,wDAA6B,CAAC;YACrD,QAAQ,EAAE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE;gBACjC,MAAM,YAAY,GAAG,IAAI,oBAAY,CAAC,eAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjE,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAExB,uCAAuC;gBACvC,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACrC,CAAC;YACD,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;gBAChC,MAAM,cAAc,GAAG,IAAI,sBAAc,CAAC,eAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClE,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAE1B,uCAAuC;gBACvC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvC,CAAC;SACF,CAAC,CAAC;QAEH,iFAAiF;QACjF,MAAM,mBAAmB,GAAG,sDAAmB,CAAC,CAAC,UAAU,EAAE,QAAQ,EAAE,EAAE;YACvE,GAAG,CAAC,KAAK,CAAC,uBAAuB,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC,CAAC;YACrE,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,GAAG,CAAC,KAAK,CACP,iCAAiC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAC1G,CAAC;gBACF,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,mFAAmF;QACnF,MAAM,aAAa,GAAG,IAAI,4BAAoB,CAAC,aAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3F,aAAa,CAAC,IAAI,GAAG,6CAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAC7G,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzB,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\r\nimport { pipe } from 'rxjs/util/pipe';\r\nimport * as log from '../../util/log';\r\nimport { Transform } from '../../brocc/transform';\r\nimport { transformSourceFiles } from '../../ngc/transform-source-files';\r\nimport { analyseDependencies } from '../../ts/analyse-dependencies-transformer';\r\nimport { transformComponentSourceFiles } from '../../ts/ng-component-transformer';\r\nimport { isEntryPoint, TemplateNode, StylesheetNode, TypeScriptSourceNode, fileUrl, tsUrl } from '../nodes';\r\n\r\nexport const analyseSourcesTransform: Transform = pipe(\r\n  map(graph => {\r\n    const entryPoints = graph.filter(isEntryPoint);\r\n    for (let entryPoint of entryPoints) {\r\n      log.debug(`Analysing sources for ${entryPoint.data.entryPoint.moduleId}`);\r\n\r\n      // Extracts templateUrl and styleUrls from `@Component({..})` decorators.\r\n      const extractResources = transformComponentSourceFiles({\r\n        template: ({ templateFilePath }) => {\r\n          const templateNode = new TemplateNode(fileUrl(templateFilePath));\r\n          graph.put(templateNode);\r\n\r\n          // mark that entryPoint depends on node\r\n          entryPoint.dependsOn(templateNode);\r\n        },\r\n        stylesheet: ({ styleFilePath }) => {\r\n          const stylesheetNode = new StylesheetNode(fileUrl(styleFilePath));\r\n          graph.put(stylesheetNode);\r\n\r\n          // mark that entryPoint depends on node\r\n          entryPoint.dependsOn(stylesheetNode);\r\n        }\r\n      });\r\n\r\n      // Extract TypeScript dependencies from source text (`import .. from 'moduleId'`)\r\n      const extractDependencies = analyseDependencies((sourceFile, moduleId) => {\r\n        log.debug(`Found dependency in ${sourceFile.fileName}: ${moduleId}`);\r\n        const dep = entryPoints.find(ep => ep.data.entryPoint.moduleId === moduleId);\r\n        if (dep) {\r\n          log.debug(\r\n            `Found entry point dependency: ${entryPoint.data.entryPoint.moduleId} -> ${dep.data.entryPoint.moduleId}`\r\n          );\r\n          entryPoint.dependsOn(dep);\r\n        }\r\n      });\r\n\r\n      // TODO: a typescript `SourceFile` may also be added as individual nod to the graph\r\n      const tsSourcesNode = new TypeScriptSourceNode(tsUrl(entryPoint.data.entryPoint.moduleId));\r\n      tsSourcesNode.data = transformSourceFiles(entryPoint.data.tsConfig, [extractResources, extractDependencies]);\r\n      graph.put(tsSourcesNode);\r\n      entryPoint.dependsOn(tsSourcesNode);\r\n    }\r\n\r\n    return graph;\r\n  })\r\n);\r\n"]}