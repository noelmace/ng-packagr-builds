{"version":3,"file":"init-tsconfig.di.js","sourceRoot":"","sources":["../../../../src/lib/ng-v5/init/init-tsconfig.di.ts"],"names":[],"mappings":";;AAGA,+CAAwD;AAExD,2DAA+E;AAC/E,gDAAoE;AACpE,uEAAyE;AAE5D,QAAA,eAAe,GAAG,CAAC,MAA0B,EAAY,EAAE;IACtE,MAAM,CAAC;QACL,OAAO,EAAE,+BAAuB;QAChC,UAAU,EAAE,GAAG,EAAE;YACf,MAAM,CAAC,gCAAqB,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,EAAE,EAAE;KACT,CAAC;AACJ,CAAC,CAAC;AAEW,QAAA,uBAAuB,GAAG,IAAI,6BAAc,CAAW,uBAAuB,CAAC,CAAC;AAEhF,QAAA,0BAA0B,GAAa,uBAAe,EAAE,CAAC;AAEzD,QAAA,oBAAoB,GAAG,IAAI,6BAAc,CAAY,6BAA6B,CAAC,CAAC;AAEpF,QAAA,wBAAwB,GAAsB,+BAAgB,CAAC;IAC1E,OAAO,EAAE,4BAAoB;IAC7B,UAAU,EAAE,sDAA4B;IACxC,IAAI,EAAE,CAAC,+BAAuB,CAAC;CAChC,CAAC,CAAC","sourcesContent":["// XX: has or is using name 'ParsedConfiguration' ... but cannot be named\r\nimport { ParsedConfiguration } from '@angular/compiler-cli';\r\n\r\nimport { InjectionToken, Provider } from 'injection-js';\r\nimport { Transform } from '../../brocc/transform';\r\nimport { TransformProvider, provideTransform } from '../../brocc/transform.di';\r\nimport { createDefaultTsConfig, TsConfig } from '../../ts/tsconfig';\r\nimport { initTsConfigTransformFactory } from './init-tsconfig.transform';\r\n\r\nexport const provideTsConfig = (values?: TsConfig | string): Provider => {\r\n  return {\r\n    provide: DEFAULT_TS_CONFIG_TOKEN,\r\n    useFactory: () => {\r\n      return createDefaultTsConfig(values);\r\n    },\r\n    deps: []\r\n  };\r\n};\r\n\r\nexport const DEFAULT_TS_CONFIG_TOKEN = new InjectionToken<TsConfig>('ng.v5.defaultTsConfig');\r\n\r\nexport const DEFAULT_TS_CONFIG_PROVIDER: Provider = provideTsConfig();\r\n\r\nexport const INIT_TS_CONFIG_TOKEN = new InjectionToken<Transform>('ng.v5.initTsConfigTransform');\r\n\r\nexport const INIT_TS_CONFIG_TRANSFORM: TransformProvider = provideTransform({\r\n  provide: INIT_TS_CONFIG_TOKEN,\r\n  useFactory: initTsConfigTransformFactory,\r\n  deps: [DEFAULT_TS_CONFIG_TOKEN]\r\n});\r\n"]}