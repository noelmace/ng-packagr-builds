{"version":3,"file":"package.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-v5/package.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { concat as concatStatic } from 'rxjs/observable/concat';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { of as observableOf } from 'rxjs/observable/of';\r\nimport { concatMap, map, retry, switchMap, takeLast, tap } from 'rxjs/operators';\r\nimport { pipe } from 'rxjs/util/pipe';\r\nimport { BuildGraph } from '../brocc/build-graph';\r\nimport { DepthBuilder, Groups } from '../brocc/depth';\r\nimport { Node, STATE_IN_PROGESS } from '../brocc/node';\r\nimport { Transform } from '../brocc/transform';\r\nimport * as log from '../util/log';\r\nimport { copyFiles } from '../util/copy';\r\nimport { rimraf } from '../util/rimraf';\r\nimport { PackageNode, EntryPointNode, ngUrl, isEntryPoint, byEntryPoint } from './nodes';\r\nimport { discoverPackages } from './discover-packages';\r\n\r\n/**\r\n * A transformation for building an npm package:\r\n *\r\n *  - discoverPackages\r\n *  - initTsConfig\r\n *  - analyzeTsSources (thereby extracting template and stylesheet files)\r\n *  - for each entry point\r\n *    - run the entryPontTransform\r\n *  - writeNpmPackage\r\n *\r\n * @param project Project token, reference to `ng-package.json`\r\n * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.\r\n * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.\r\n * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.\r\n */\r\nexport const packageTransformFactory = (\r\n  project: string,\r\n  initTsConfigTransform: Transform,\r\n  analyseSourcesTransform: Transform,\r\n  entryPointTransform: Transform\r\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\r\n  const pkgUri = ngUrl(project);\r\n\r\n  return source$.pipe(\r\n    tap(() => {\r\n      log.info(`Building Angular Package`);\r\n    }),\r\n    // Discover packages and entry points\r\n    switchMap(graph => {\r\n      const pkg = discoverPackages({ project });\r\n\r\n      return fromPromise(pkg).pipe(\r\n        map(value => {\r\n          const ngPkg = new PackageNode(pkgUri);\r\n          ngPkg.data = value;\r\n\r\n          return graph.put(ngPkg);\r\n        })\r\n      );\r\n    }),\r\n    // Clean the primary dest folder (should clean all secondary sub-directory, as well)\r\n    switchMap(graph => {\r\n      const { dest, deleteDestPath } = graph.get(pkgUri).data;\r\n      return fromPromise(deleteDestPath ? rimraf(dest) : Promise.resolve());\r\n    }, (graph, _) => graph),\r\n    // Add entry points to graph\r\n    map(graph => {\r\n      const ngPkg = graph.get(pkgUri);\r\n\r\n      const generateOutDirPath = (folder: string) => path.join(ngPkg.data.dest, folder);\r\n      const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {\r\n        const { destinationFiles, moduleId } = entryPoint;\r\n        const node = new EntryPointNode(ngUrl(moduleId));\r\n        node.data = { entryPoint, destinationFiles };\r\n        node.state = 'dirty';\r\n        ngPkg.dependsOn(node);\r\n\r\n        return node;\r\n      });\r\n\r\n      return graph.put(entryPoints);\r\n    }),\r\n    // Initialize the tsconfig for each entry point\r\n    initTsConfigTransform,\r\n    // Analyse dependencies and external resources for each entry point\r\n    analyseSourcesTransform,\r\n    // Next, run through the entry point transformation (assets rendering, code compilation)\r\n    scheduleEntryPoints(entryPointTransform),\r\n    // Write npm package to dest folder\r\n    writeNpmPackage(pkgUri),\r\n    tap(graph => {\r\n      const ngPkg = graph.get(pkgUri);\r\n      log.success(`Built Angular Package!\r\n- from: ${ngPkg.data.src}\r\n- to:   ${ngPkg.data.dest}`);\r\n    })\r\n  );\r\n};\r\n\r\nconst writeNpmPackage = (pkgUri: string): Transform =>\r\n  pipe(\r\n    switchMap(graph => {\r\n      const ngPkg = graph.get(pkgUri);\r\n\r\n      return fromPromise(copyFiles([`${ngPkg.data.src}/LICENSE`, `${ngPkg.data.src}/README.md`], ngPkg.data.dest)).pipe(\r\n        map(() => graph)\r\n      );\r\n    })\r\n  );\r\n\r\nconst scheduleEntryPoints = (epTransform: Transform): Transform =>\r\n  pipe(\r\n    concatMap(graph => {\r\n      // Calculate node/dependency depth and determine build order\r\n      const depthBuilder = new DepthBuilder();\r\n      const entryPoints = graph.filter(isEntryPoint);\r\n      entryPoints.forEach(entryPoint => {\r\n        const deps = entryPoint.filter(isEntryPoint).map(ep => ep.url);\r\n        depthBuilder.add(entryPoint.url, deps);\r\n      });\r\n\r\n      // The array index is the depth.\r\n      const groups = depthBuilder.build();\r\n      const flattenedGroups = groups.reduce((prev, current) => prev.concat(current), []);\r\n      let currentIndex = 0;\r\n\r\n      // Build entry points with lower depth values first.\r\n      const eps$ = flattenedGroups.map(() =>\r\n        observableOf(graph).pipe(\r\n          tap(() => {\r\n            // Find current entry point in progress\r\n            const epUrl = flattenedGroups[currentIndex];\r\n            const entryPoint = graph.find(byEntryPoint().and(ep => ep.url === epUrl));\r\n\r\n            // Mark the entry point as 'in-progress'\r\n            entryPoint.state = STATE_IN_PROGESS;\r\n          }),\r\n          epTransform,\r\n          tap(() => {\r\n            currentIndex += 1;\r\n          })\r\n        )\r\n      );\r\n\r\n      // Build all entry points, then continue\r\n      return concatStatic(...eps$).pipe(takeLast(1));\r\n    })\r\n  );\r\n"]}