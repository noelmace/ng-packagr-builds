{"version":3,"file":"ng-ts-ast.js","sourceRoot":"","sources":["../../../src/lib/ts/ng-ts-ast.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\n\r\nexport const isComponentDecorator = (node: ts.Node): node is ts.Decorator => {\r\n  if (ts.isDecorator(node)) {\r\n    const callExpression = node.getChildren().find(ts.isCallExpression);\r\n    // callExpression may be undefined, check\r\n    if (callExpression && ts.isCallExpression(callExpression)) {\r\n      const decoratorExpression = callExpression.expression;\r\n\r\n      if (ts.isIdentifier(decoratorExpression)) {\r\n        // Accounts for `import { Component } from '@angular/core`\r\n        // and accounts for `import { Component as Foo } from '@angular/core';`\r\n        const identifierText = decoratorExpression.getText();\r\n        const ngCoreImports = resolveImportSymbolsFromModule(node, '@angular/core');\r\n\r\n        return ngCoreImports['Component'] === identifierText;\r\n      } else if (ts.isPropertyAccessExpression(decoratorExpression)) {\r\n        // Accounts for `import * as ng from '@angular/core'`;\r\n        const namespaceName = decoratorExpression.expression.getText();\r\n        const namespacePropertyName = decoratorExpression.name.getText();\r\n        const ngCoreImports = resolveImportSymbolsFromModule(node, '@angular/core');\r\n\r\n        return namespacePropertyName === 'Component' && namespaceName === ngCoreImports.__namespace;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const isPropertyAssignmentFor = (node: ts.Node, name: string): node is ts.PropertyAssignment =>\r\n  ts.isPropertyAssignment(node) && node.name.getText() === name;\r\n\r\nexport const isTemplateUrl = (node: ts.Node): node is ts.PropertyAssignment =>\r\n  isPropertyAssignmentFor(node, 'templateUrl');\r\n\r\nexport const isStyleUrls = (node: ts.Node): node is ts.PropertyAssignment => isPropertyAssignmentFor(node, 'styleUrls');\r\n\r\nexport const isImportFromModule = (node: ts.Node, moduleIdentifier: string): node is ts.ImportDeclaration => {\r\n  if (ts.isImportDeclaration(node)) {\r\n    const moduleSpecififer = node.moduleSpecifier.getText();\r\n    const moduleId = moduleSpecififer.substring(1, moduleSpecififer.length - 1);\r\n\r\n    return moduleId === moduleIdentifier;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const resolveImportSymbolsFromModule = (node: ts.Node, moduleIdentifier: string) => {\r\n  const importSymbols: {\r\n    __namespace?: string;\r\n    [key: string]: string;\r\n  } = {};\r\n\r\n  return node\r\n    .getSourceFile()\r\n    .statements.filter(statement => isImportFromModule(statement, moduleIdentifier))\r\n    .map((importDeclaration: ts.ImportDeclaration) => importDeclaration.importClause)\r\n    .reduce((symbols, importClause) => {\r\n      const importNode = importClause.getChildAt(0);\r\n      if (ts.isNamedImports(importNode)) {\r\n        const importSpecifier = importNode.elements;\r\n\r\n        for (let specifier of importSpecifier) {\r\n          // Accounts for aliased imports and straight named imports\r\n          const importedFrom = specifier.propertyName ? specifier.propertyName.getText() : specifier.name.getText();\r\n          const importedAs = specifier.name.getText();\r\n\r\n          importSymbols[importedFrom] = importedAs;\r\n        }\r\n      } else if (ts.isNamespaceImport(importNode)) {\r\n        const importedAsNamespace = importNode.name.getText();\r\n        importSymbols.__namespace = importedAsNamespace;\r\n      }\r\n\r\n      return importSymbols;\r\n    }, importSymbols);\r\n};\r\n"]}