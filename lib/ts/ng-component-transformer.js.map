{"version":3,"file":"ng-component-transformer.js","sourceRoot":"","sources":["../../../src/lib/ts/ng-component-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as path from 'path';\r\nimport { transformComponent } from './transform-component';\r\nimport { isSynthesizedSourceFile, replaceWithSynthesizedSourceText, writeSourceFile } from './synthesized-source-file';\r\n\r\n/**\r\n * Call signature for a transformer applied to `@Component({ templateUrl: '...' })`.\r\n *\r\n * A `TemplateTransformer` will update the property assignment for `templateUrl` in the decorator.\r\n */\r\nexport interface TemplateTransformer {\r\n  (\r\n    {\r\n\r\n    }: {\r\n      node: ts.Node;\r\n      sourceFile: ts.SourceFile;\r\n      sourceFilePath: string;\r\n      templatePath: string;\r\n      templateFilePath: string;\r\n    }\r\n  ): string | undefined | void;\r\n}\r\n\r\n/**\r\n * Call signature for a transformer applied to `@Component({ styleUrls: ['...'] })`.\r\n *\r\n * A `StylesheetTransformer` will update the property assignment for `stylesUrl` in the decorator.\r\n *\r\n * WATCH OUT! A stylesheet transformer is called for every url in the `stylesUrl` array!\r\n */\r\nexport interface StylesheetTransformer {\r\n  (\r\n    {\r\n\r\n    }: {\r\n      node: ts.Node;\r\n      sourceFile: ts.SourceFile;\r\n      sourceFilePath: string;\r\n      stylePath: string;\r\n      styleFilePath: string;\r\n    }\r\n  ): string | undefined | void;\r\n}\r\n\r\nexport interface ComponentSourceFileTransformer {\r\n  (\r\n    {\r\n\r\n    }: {\r\n      template: TemplateTransformer;\r\n      stylesheet: StylesheetTransformer;\r\n    }\r\n  ): ts.TransformerFactory<ts.SourceFile>;\r\n}\r\n\r\nexport const transformComponentSourceFiles: ComponentSourceFileTransformer = ({ template, stylesheet }) =>\r\n  transformComponent({\r\n    templateUrl: node => {\r\n      const sourceFile = node.getSourceFile();\r\n      const sourceFilePath = node.getSourceFile().fileName;\r\n      // XX: strip quotes (' or \") from path\r\n      const templatePath = node.initializer.getText().substring(1, node.initializer.getText().length - 1);\r\n      const templateFilePath = path.resolve(path.dirname(sourceFilePath), templatePath);\r\n\r\n      // Call the transformer\r\n      const inlinedTemplate = template({ node, sourceFile, sourceFilePath, templatePath, templateFilePath });\r\n\r\n      if (typeof inlinedTemplate === 'string') {\r\n        // Apply the transformer result, thus altering the source file\r\n        const synthesizedNode = ts.updatePropertyAssignment(\r\n          node,\r\n          ts.createIdentifier('template'),\r\n          ts.createLiteral(inlinedTemplate)\r\n        );\r\n\r\n        const synthesizedSourceText = 'template: `'.concat(inlinedTemplate).concat('`');\r\n        replaceWithSynthesizedSourceText(node, synthesizedSourceText);\r\n\r\n        return synthesizedNode;\r\n      } else {\r\n        return node;\r\n      }\r\n    },\r\n    styleUrls: node => {\r\n      const sourceFile = node.getSourceFile();\r\n      const sourceFilePath = node.getSourceFile().fileName;\r\n\r\n      // Handle array arguments for styleUrls\r\n      const styleUrls = node.initializer\r\n        .getChildren()\r\n        .filter(node => node.kind === ts.SyntaxKind.SyntaxList)\r\n        .map(node => node.getChildren().map(n => n.getText()))\r\n        .reduce((prev, current) => prev.concat(...current), [])\r\n        .filter(text => text !== ',')\r\n        .map(url => url.substring(1, url.length - 1));\r\n\r\n      // Call the transformation for each value found in `stylesUrls: []`.\r\n      const stylesheets = styleUrls.map((url: string) => {\r\n        const styleFilePath = path.resolve(path.dirname(sourceFilePath), url);\r\n\r\n        // Call the stylesheet transformer\r\n        const content = stylesheet({ node, sourceFile, sourceFilePath, stylePath: url, styleFilePath });\r\n\r\n        return typeof content === 'string' ? content : url;\r\n      });\r\n\r\n      // Check if the transformer manipulated the metadata of the `@Component({..})` decorator\r\n      const hasChanged = stylesheets.every((value, index) => {\r\n        return styleUrls[index] && styleUrls[index] !== value;\r\n      });\r\n\r\n      if (hasChanged) {\r\n        // Apply the transformation result, thus altering the source file\r\n        const synthesizedNode = ts.updatePropertyAssignment(\r\n          node,\r\n          ts.createIdentifier('styles'),\r\n          ts.createArrayLiteral(stylesheets.map(value => ts.createLiteral(value)))\r\n        );\r\n\r\n        const synthesizedSourceText = 'styles: ['\r\n          .concat(stylesheets.map(value => `\\`${value}\\``).join(', '))\r\n          .concat(']');\r\n        replaceWithSynthesizedSourceText(node, synthesizedSourceText);\r\n\r\n        return synthesizedNode;\r\n      } else {\r\n        return node;\r\n      }\r\n    },\r\n    file: sourceFile => {\r\n      // XX ... the string replacement is quite hacky.\r\n      // Why can't we use `ts.SourceFile#update()`?\r\n      // It produces a `FalseExpression` error, somehow.\r\n      if (isSynthesizedSourceFile(sourceFile['original'])) {\r\n        sourceFile['__replacements'] = sourceFile['original'].__replacements;\r\n        return writeSourceFile(sourceFile);\r\n      }\r\n\r\n      return sourceFile;\r\n    }\r\n  });\r\n"]}