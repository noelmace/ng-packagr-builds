{"version":3,"file":"downlevel-transformer.js","sourceRoot":"","sources":["../../../src/lib/ts/downlevel-transformer.ts"],"names":[],"mappings":";;AAAA,2CASoB;AAEpB,6BAA6B;AAE7B,mCAAmC;AAEnC;;GAEG;AACH,MAAM,gBAAgB,GAAoB;IACxC,MAAM,EAAE,yBAAY,CAAC,GAAG;IACxB,MAAM,EAAE,uBAAU,CAAC,MAAM;IACzB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IACf,aAAa,EAAE,IAAI;IACnB,kBAAkB,EAAE,IAAI;IACxB,gBAAgB,EAAE,iCAAoB,CAAC,MAAM;CAC9C,CAAC;AAEF;;;GAGG;AACH,8BAAqC,UAAkB,EAAE,MAAc;IACrE,GAAG,CAAC,KAAK,CAAC,iBAAiB,UAAU,EAAE,CAAC,CAAC;IAEzC,MAAM,eAAe,qBAChB,gBAAgB,IACnB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EACjC,MAAM,GACP,CAAC;IAEF,MAAM,YAAY,GAAG,+BAAkB,CAAC,eAAe,CAAC,CAAC;IACzD,MAAM,OAAO,GAAG,0BAAa,CAAC,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;IAC3E,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IAElC,MAAM,CAAC,UAAU,CAAC,WAAW;QAC3B,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,8BAAiB,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AACxB,CAAC;AAhBD,oDAgBC;AAED;;;;GAIG;AACH,8BAAqC,IAAY,EAAE,QAAgB;IACjE,GAAG,CAAC,KAAK,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;IAE7B,MAAM,eAAe,qBAChB,gBAAgB,IACnB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAChC,CAAC;IAEF,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,4BAAe,CAAC,IAAI,EAAE;QAC1D,eAAe;KAChB,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;QACrB,IAAI,EAAE,UAAU;QAChB,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;KAC/B,CAAC,CAAC;AACL,CAAC;AAhBD,oDAgBC","sourcesContent":["import {\r\n  ModuleKind,\r\n  ScriptTarget,\r\n  createCompilerHost,\r\n  CompilerOptions,\r\n  createProgram,\r\n  formatDiagnostics,\r\n  transpileModule,\r\n  ModuleResolutionKind\r\n} from 'typescript';\r\nimport { RawSourceMap } from 'rollup';\r\nimport * as path from 'path';\r\n\r\nimport * as log from '../util/log';\r\n\r\n/**\r\n * Base `tsc` `CompilerOptions` shared among various downleveling methods.\r\n */\r\nconst COMPILER_OPTIONS: CompilerOptions = {\r\n  target: ScriptTarget.ES5,\r\n  module: ModuleKind.ES2015,\r\n  allowJs: true,\r\n  sourceMap: true,\r\n  importHelpers: true,\r\n  downlevelIteration: true,\r\n  moduleResolution: ModuleResolutionKind.NodeJs\r\n};\r\n\r\n/**\r\n * Downlevels a .js file from `ES2015` to `ES5`. Internally, uses `tsc`.\r\n *\r\n */\r\nexport function downlevelEmitWithTsc(entryPoint: string, outDir: string): Promise<void> {\r\n  log.debug(`tsc downlevel ${entryPoint}`);\r\n\r\n  const compilerOptions: CompilerOptions = {\r\n    ...COMPILER_OPTIONS,\r\n    mapRoot: path.dirname(entryPoint),\r\n    outDir\r\n  };\r\n\r\n  const compilerHost = createCompilerHost(compilerOptions);\r\n  const program = createProgram([entryPoint], compilerOptions, compilerHost);\r\n  const emitResult = program.emit();\r\n\r\n  return emitResult.emitSkipped\r\n    ? Promise.reject(new Error(formatDiagnostics(emitResult.diagnostics, compilerHost)))\r\n    : Promise.resolve();\r\n}\r\n\r\n/**\r\n * Downlevels a .js file from `ES2015` to `ES5`. Internally, uses `tsc`.\r\n *\r\n * Required for some external as they contains `ES2015` syntax such as `const` and `let`\r\n */\r\nexport function downlevelCodeWithTsc(code: string, filePath: string): Promise<{ code: string; map: RawSourceMap }> {\r\n  log.debug(`tsc ${filePath}`);\r\n\r\n  const compilerOptions: CompilerOptions = {\r\n    ...COMPILER_OPTIONS,\r\n    mapRoot: path.dirname(filePath)\r\n  };\r\n\r\n  const { outputText, sourceMapText } = transpileModule(code, {\r\n    compilerOptions\r\n  });\r\n\r\n  return Promise.resolve({\r\n    code: outputText,\r\n    map: JSON.parse(sourceMapText)\r\n  });\r\n}\r\n"]}