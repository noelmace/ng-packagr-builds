{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":";;AAAA,4CAA4C;AAG5C,6BAA6B;AAC7B,iCAAiC;AAQjC;;GAEG;AACH,6BAAoC,QAAiB;IACnD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACd,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC;AAND,kDAMC;AAED;;;;GAIG;AACH,+BAAsC,MAA0B;IAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;AACH,CAAC;AARD,sDAQC;AAED;;;GAGG;AACU,QAAA,kBAAkB,GAAG,CAAC,eAAyB,EAAE,UAAwB,EAAY,EAAE;IAClG,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAExD,wEAAwE;IACxE,IAAI,QAAQ,GAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;IAErE,gGAAgG;IAChG,sHAAsH;IACtH,MAAM,eAAe,GAAgC;QACnD,qBAAqB,EAAE,IAAI;QAC3B,sBAAsB,EAAE,IAAI;QAC5B,4BAA4B;QAC5B,SAAS,EAAE,IAAI;QACf,gBAAgB,EAAE,EAAE,CAAC,oBAAoB,CAAC,MAAM;QAChD,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;QAC9B,WAAW,EAAE,IAAI;QACjB,GAAG,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;KACvB,CAAC;IAEF,MAAM,cAAc,GAAsB;QACxC,SAAS,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;QACrC,OAAO,EAAE;YACP,YAAY,EAAE,UAAU,CAAC,QAAQ;YACjC,iBAAiB,EAAE,GAAG,UAAU,CAAC,cAAc,KAAK;YACpD,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,QAAQ;YACjB,OAAO,EAAE,QAAQ;YACjB,MAAM,EAAE,EAAE;YACV,GAAG,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG;YAC7G,8DAA8D;YAC9D,cAAc,EAAE,QAAQ;YACxB,+HAA+H;YAC/H,aAAa,EAAE,IAAI;SACpB;KACF,CAAC;IAEF,QAAQ,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;IAC9C,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,QAAQ,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;IAEhG,MAAM,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7B,KAAK,UAAU;YACb,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC3C,KAAK,CAAC;QACR,KAAK,OAAO;YACV,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;YACxC,KAAK,CAAC;QACR,KAAK,cAAc;YACjB,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,KAAK,CAAC;QACR;YACE,KAAK,CAAC;IACV,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import * as ng from '@angular/compiler-cli';\r\n// XX: has or is using name 'ParsedConfiguration' ... but cannot be named\r\nimport { ParsedConfiguration } from '@angular/compiler-cli';\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\nimport { NgEntryPoint } from '../ng-package-format/entry-point';\r\n\r\n/**\r\n * TypeScript configuration used internally (marker typer).\r\n */\r\nexport type TsConfig = ng.ParsedConfiguration;\r\n\r\n/**\r\n * Reads the default TypeScript configuration.\r\n */\r\nexport function readDefaultTsConfig(fileName?: string): TsConfig {\r\n  if (!fileName) {\r\n    fileName = path.resolve(__dirname, 'conf', 'tsconfig.ngc.json');\r\n  }\r\n\r\n  return ng.readConfiguration(fileName);\r\n}\r\n\r\n/**\r\n * Creates a parsed TypeScript configuration object.\r\n *\r\n * @param values File path or parsed configuration.\r\n */\r\nexport function createDefaultTsConfig(values?: TsConfig | string): TsConfig {\r\n  if (!values) {\r\n    return readDefaultTsConfig();\r\n  } else if (typeof values === 'string') {\r\n    return readDefaultTsConfig(values);\r\n  } else {\r\n    return values;\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\r\n * default config with entry point-specific values.\r\n */\r\nexport const initializeTsConfig = (defaultTsConfig: TsConfig, entryPoint: NgEntryPoint): TsConfig => {\r\n  const basePath = path.dirname(entryPoint.entryFilePath);\r\n\r\n  // Resolve defaults from DI token and create a deep copy of the defaults\r\n  let tsConfig: TsConfig = JSON.parse(JSON.stringify(defaultTsConfig));\r\n\r\n  // minimal compilerOptions needed in order to avoid errors, with their associated default values\r\n  // some are not overrided in order to keep the default associated TS errors if the user choose to set incorrect values\r\n  const requiredOptions: Partial<ng.CompilerOptions> = {\r\n    emitDecoratorMetadata: true,\r\n    experimentalDecorators: true,\r\n    // required by inlineSources\r\n    sourceMap: true,\r\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n    target: ts.ScriptTarget.ES2015,\r\n    declaration: true,\r\n    lib: ['dom', 'es2015']\r\n  };\r\n\r\n  const overrideConfig: Partial<TsConfig> = {\r\n    rootNames: [entryPoint.entryFilePath],\r\n    options: {\r\n      flatModuleId: entryPoint.moduleId,\r\n      flatModuleOutFile: `${entryPoint.flatModuleFile}.js`,\r\n      basePath: basePath,\r\n      baseUrl: basePath,\r\n      rootDir: basePath,\r\n      outDir: '',\r\n      lib: entryPoint.languageLevel ? entryPoint.languageLevel.map(lib => `lib.${lib}.d.ts`) : tsConfig.options.lib,\r\n      // setting this as basedir will rewire triple-slash references\r\n      declarationDir: basePath,\r\n      // required in order to avoid \"ENOENT: no such file or directory, .../.ng_pkg_build/...\" errors when using the programmatic API\r\n      inlineSources: true\r\n    }\r\n  };\r\n\r\n  tsConfig.rootNames = overrideConfig.rootNames;\r\n  tsConfig.options = Object.assign({}, requiredOptions, tsConfig.options, overrideConfig.options);\r\n\r\n  switch (entryPoint.jsxConfig) {\r\n    case 'preserve':\r\n      tsConfig.options.jsx = ts.JsxEmit.Preserve;\r\n      break;\r\n    case 'react':\r\n      tsConfig.options.jsx = ts.JsxEmit.React;\r\n      break;\r\n    case 'react-native':\r\n      tsConfig.options.jsx = ts.JsxEmit.ReactNative;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return tsConfig;\r\n};\r\n"]}