{"version":3,"file":"create-emit-callback.js","sourceRoot":"","sources":["../../../src/lib/ngc/create-emit-callback.ts"],"names":[],"mappings":";AAAA,wFAAwF;AACxF,0EAA0E;AAC1E,uIAAuI;;AAEvI;;;;;;GAMG;AAEH,4IAA4I;AAC5I,MAAM,eAAe,GAAG,oEAAoE,CAAC;AAG7F,+CAAmC;AAGnC,kGAAkG;AAClG,4BAAmC,OAA4B;IAC7D,MAAM,mBAAmB,GAAG,OAAO,CAAC,aAAa,KAAK,YAAY,CAAC;IACnE,MAAM,uBAAuB,GAAG,OAAO,CAAC,0BAA0B,CAAC;IACnE,EAAE,CAAC,CAAC,CAAC,mBAAmB,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,mFAAmF;QACnF,iEAAiE;QACjE,mCAAmC;QACnC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACvC,CAAC;IACD,MAAM,WAAW,GAWb;QACF,2BAA2B,EAAE,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;QACpG,gBAAgB,EAAE,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,EAAE;QAC7C,2BAA2B,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK;QAC9C,kBAAkB,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ;QACxC,UAAU,EAAE,KAAK;QACjB,OAAO,EAAE,IAAI;QACb,2BAA2B,EAAE,KAAK;QAClC,mBAAmB;QACnB,uBAAuB;KACxB,CAAC;IAEF,MAAM,CAAC,CAAC,EACN,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB,kBAAkB,GAAG,EAAE,EACvB,IAAI,EACJ,OAAO,EACR,EAAE,EAAE,CACH,OAAO,CAAC,eAAe,CACrB,OAAO,oBACF,WAAW,IAAE,OAAO,EAAE,IAAI,KAC/B,IAAI,EACJ,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB;QACE,QAAQ,EAAE,kBAAkB,CAAC,MAAM;QACnC,OAAO,EAAE,kBAAkB,CAAC,KAAK;KAClC,CACF,CAAC;AACN,CAAC;AA3DD,gDA2DC","sourcesContent":["// XX: internal in ngc's `main()`, a tsickle emit callback is passed to the tsc compiler\r\n// ... blatanlty copy-paste the emit callback here. it's not a public api.\r\n// ... @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/main.ts#L36-L38\r\n\r\n/*\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/transformers/util.ts#L14\r\nconst GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\r\n\r\nimport * as path from 'path';\r\nimport * as tsickle from 'tsickle';\r\nimport * as api from '@angular/compiler-cli';\r\n\r\n// @link https://github.com/angular/angular/blob/83d207d/packages/compiler-cli/src/main.ts#L42-L84\r\nexport function createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback | undefined {\r\n  const transformDecorators = options.annotationsAs !== 'decorators';\r\n  const transformTypesToClosure = options.annotateForClosureCompiler;\r\n  if (!transformDecorators && !transformTypesToClosure) {\r\n    return undefined;\r\n  }\r\n  if (transformDecorators) {\r\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\r\n    // Otherwise tsickle might emit references to non imported values\r\n    // as TypeScript elided the import.\r\n    options.emitDecoratorMetadata = true;\r\n  }\r\n  const tsickleHost: Pick<\r\n    tsickle.TsickleHost,\r\n    | 'shouldSkipTsickleProcessing'\r\n    | 'pathToModuleName'\r\n    | 'shouldIgnoreWarningsForPath'\r\n    | 'fileNameToModuleId'\r\n    | 'googmodule'\r\n    | 'untyped'\r\n    | 'convertIndexImportShorthand'\r\n    | 'transformDecorators'\r\n    | 'transformTypesToClosure'\r\n  > = {\r\n    shouldSkipTsickleProcessing: fileName => /\\.d\\.ts$/.test(fileName) || GENERATED_FILES.test(fileName),\r\n    pathToModuleName: (context, importPath) => '',\r\n    shouldIgnoreWarningsForPath: filePath => false,\r\n    fileNameToModuleId: fileName => fileName,\r\n    googmodule: false,\r\n    untyped: true,\r\n    convertIndexImportShorthand: false,\r\n    transformDecorators,\r\n    transformTypesToClosure\r\n  };\r\n\r\n  return ({\r\n    program,\r\n    targetSourceFile,\r\n    writeFile,\r\n    cancellationToken,\r\n    emitOnlyDtsFiles,\r\n    customTransformers = {},\r\n    host,\r\n    options\r\n  }) =>\r\n    tsickle.emitWithTsickle(\r\n      program,\r\n      { ...tsickleHost, options, host },\r\n      host,\r\n      options,\r\n      targetSourceFile,\r\n      writeFile,\r\n      cancellationToken,\r\n      emitOnlyDtsFiles,\r\n      {\r\n        beforeTs: customTransformers.before,\r\n        afterTs: customTransformers.after\r\n      }\r\n    );\r\n}\r\n"]}