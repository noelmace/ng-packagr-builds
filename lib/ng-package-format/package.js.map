{"version":3,"file":"package.js","sourceRoot":"","sources":["../../../src/lib/ng-package-format/package.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAI7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IACE,YACmB,QAAgB;QACjC;;WAEG;QACa,OAAqB;QACrC;;WAEG;QACa,cAA8B,EAAE;QAR/B,aAAQ,GAAR,QAAQ,CAAQ;QAIjB,YAAO,GAAP,OAAO,CAAc;QAIrB,gBAAW,GAAX,WAAW,CAAqB;IAC/C,CAAC;IAEJ,wGAAwG;IACxG,IAAW,GAAG;QACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,sCAAsC;IACtC,IAAW,cAAc;QACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAED,4DAA4D;IAC5D,IAAW,IAAI;QACb,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED,IAAW,oBAAoB;QAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,IAAI,CAAC;IAC5D,CAAC;IAED,IAAW,8BAA8B;QACvC,2DAA2D;QAC3D,MAAM,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,MAAM,KAAK,GAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAc,IAAI,QAAQ,CAAC;QAE5F,mCAAmC;QACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;IAC7F,CAAC;IAEO,uBAAuB,CAAC,GAAW;QACzC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,UAAU,CAAC,QAAgB;QAChC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;IAClG,CAAC;CACF;AAhDD,8BAgDC","sourcesContent":["import * as path from 'path';\r\nimport { NgEntryPoint } from './entry-point';\r\nimport { DirectoryPath } from './shared';\r\n\r\n/**\r\n * A package being built. Quoting Angular Package Format, a package is:\r\n *\r\n * > the smallest set of files that are published to NPM and installed together, for example\r\n * > `@angular/core`. (..) The package is installed with `npm install @angular/core`.\r\n *\r\n * #### Package and Entry Points\r\n *\r\n * A package is composed of several (one or more) entry points.\r\n * A package must contain at least the primary entry point but can have many secondary entry\r\n * points.\r\n * The module ID of the primary entry point, e.g. `@angular/core`, matches the package name, e.g.\r\n * the package name is given to the command `npm install @angular/core`.\r\n * The source code files within a package are referenced by the entry points.\r\n *\r\n * #### Representation in the domain\r\n *\r\n * A _Package_ is reflected by `NgPackage`.\r\n * An _Entry Point_ is reflected by `NgEntryPoint`.\r\n * One `NgPackage` relates to one (or many) `NgEentryPoint`,\r\n * one `NgEntryPoint` relates to one `NgPackage`.\r\n *\r\n * #### Watch Out\r\n *\r\n * The user's configuration `ngPackage` suggests that it reflects a `NgPackage`.\r\n * However, the values given in the `lib` property reflect an `NgEntryPoint`.\r\n * In case the package contains only one entry point, `ngPackage.lib` reflects the primary entry\r\n * point.\r\n *\r\n * @link https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#\r\n */\r\nexport class NgPackage {\r\n  constructor(\r\n    private readonly basePath: string,\r\n    /**\r\n     * A reference to the primary entry point.\r\n     */\r\n    public readonly primary: NgEntryPoint,\r\n    /**\r\n     * An array of seconary entry points.\r\n     */\r\n    public readonly secondaries: NgEntryPoint[] = []\r\n  ) {}\r\n\r\n  /** Absolute path of the package's source folder, derived from the user's (primary) package location. */\r\n  public get src(): DirectoryPath {\r\n    return this.basePath;\r\n  }\r\n\r\n  /** Delete output path before build */\r\n  public get deleteDestPath(): boolean {\r\n    return this.primary.$get('deleteDestPath');\r\n  }\r\n\r\n  /** Absolute path of the package's destination directory. */\r\n  public get dest(): DirectoryPath {\r\n    return this.absolutePathFromPrimary('dest');\r\n  }\r\n\r\n  public get keepLifecycleScripts(): boolean {\r\n    return this.primary.$get('keepLifecycleScripts') === true;\r\n  }\r\n\r\n  public get whitelistedNonPeerDependencies(): string[] {\r\n    // XX: default array values from JSON schema not recognized\r\n    const defValue = ['tslib'];\r\n    const value = (this.primary.$get('whitelistedNonPeerDependencies') as string[]) || defValue;\r\n\r\n    // Always append 'tslib' and dedupe\r\n    return value.concat('tslib').filter((value, index, self) => self.indexOf(value) === index);\r\n  }\r\n\r\n  private absolutePathFromPrimary(key: string) {\r\n    return path.resolve(this.basePath, this.primary.$get(key));\r\n  }\r\n\r\n  public entryPoint(moduleId: string): NgEntryPoint {\r\n    return [this.primary, ...this.secondaries].find(entryPoint => entryPoint.moduleId === moduleId);\r\n  }\r\n}\r\n"]}