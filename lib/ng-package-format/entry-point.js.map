{"version":3,"file":"entry-point.js","sourceRoot":"","sources":["../../../src/lib/ng-package-format/entry-point.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\r\nimport { SchemaClass } from '@ngtools/json-schema';\r\nimport { NgPackageConfig } from '../../ng-package.schema';\r\nimport { DirectoryPath, SourceFilePath, CssUrl, DestinationFiles } from './shared';\r\n\r\n/**\r\n * An entry point - quoting Angular Package Format - is:\r\n *\r\n * > a module intended to be imported by the user. It is referenced by a unique module ID and\r\n * > exports the public API referenced by that module ID. An example is `@angular/core` or\r\n * > `@angular/core/testing`. Both entry points exist in the `@angular/core` package, but they\r\n * > export different symbols. A package can have many entry points.\r\n *\r\n * #### Public API, source file tree and build output\r\n *\r\n * An entry point serves as the root of a source tree.\r\n * The entry point's public API references one TypeScript source file (`*.ts`).\r\n * That source file, e.g. `public_api.ts`, references other source files who in turn may reference\r\n * other source files, thus creating a tree of source code files.\r\n * The source files may be TypeScript (`*.ts`), Templates (`.html`) or Stylesheets\r\n * (`.css`, `.scss`, ..), or other formats.\r\n *\r\n * The compilation process for an entry point is a series of transformations applied to the source\r\n * files, e.g. TypeScript compilation, Inlining of Stylesheets and Templates, and so on.\r\n * As a result of the compilation process, an entry point is transpiled to a set of artefacts\r\n * (the build output) which include a FESM'15 Bundle, a FESM'5 Bundle, AoT metadata, TypeScript\r\n * type definitions, and so on.\r\n *\r\n * #### Representation in the domain\r\n *\r\n * The set of artefacts is reflected by `NgArtefacts`;\r\n * one `NgEntryPoint` relates to one `NgArtefacts`.\r\n * The parent package of an entry point is reflected by `NgPackage`.\r\n */\r\nexport class NgEntryPoint {\r\n  constructor(\r\n    /** Values from the `package.json` file of this entry point. */\r\n    public readonly packageJson: any,\r\n    /** Values from either the `ngPackage` option (from `package.json`) or values from `ng-package.json`. */\r\n    public readonly ngPackageJson: NgPackageConfig,\r\n    /** Corresponding JSON schema class instantiated from `ngPackageJson` values. */\r\n    private readonly $schema: SchemaClass<NgPackageConfig>,\r\n    /** Absolute directory path of this entry point's `package.json` location. */\r\n    public readonly basePath: string,\r\n    /** XX: additional auto-configured data passed for scondary entry point's. Needs better docs. */\r\n    private readonly secondaryData?: { [key: string]: any }\r\n  ) {}\r\n\r\n  /** Absolute file path of the entry point's source code entry file. */\r\n  public get entryFilePath(): SourceFilePath {\r\n    return path.resolve(this.basePath, this.entryFile);\r\n  }\r\n\r\n  /** Absolute directory path of this entry point's 'package.json'. */\r\n  public get destinationPath(): DirectoryPath {\r\n    if (this.secondaryData) {\r\n      return this.secondaryData.destinationPath;\r\n    } else {\r\n      return path.resolve(this.basePath, this.$get('dest'));\r\n    }\r\n  }\r\n\r\n  public get destinationFiles(): DestinationFiles {\r\n    let primaryDestPath = this.destinationPath;\r\n    let secondaryDir = '';\r\n\r\n    if (this.secondaryData) {\r\n      primaryDestPath = this.secondaryData.primaryDestinationPath;\r\n      secondaryDir = path.basename(this.secondaryData.destinationPath);\r\n    }\r\n\r\n    const flatModuleFile = this.flatModuleFile;\r\n    const pathJoinWithDest = (...paths: string[]) => path.join(primaryDestPath, ...paths);\r\n\r\n    return {\r\n      metadata: pathJoinWithDest(secondaryDir, `${flatModuleFile}.metadata.json`),\r\n      declarations: pathJoinWithDest(secondaryDir, `${flatModuleFile}.d.ts`),\r\n      esm2015: pathJoinWithDest('esm2015', secondaryDir, `${flatModuleFile}.js`),\r\n      esm5: pathJoinWithDest('esm5', secondaryDir, `${flatModuleFile}.js`),\r\n      fesm2015: pathJoinWithDest('fesm2015', `${flatModuleFile}.js`),\r\n      fesm5: pathJoinWithDest('fesm5', `${flatModuleFile}.js`),\r\n      umd: pathJoinWithDest('bundles', `${flatModuleFile}.umd.js`),\r\n      umdMinified: pathJoinWithDest('bundles', `${flatModuleFile}.umd.min.js`)\r\n    };\r\n  }\r\n\r\n  public $get(key: string): any {\r\n    return this.$schema.$$get(key);\r\n  }\r\n\r\n  public get entryFile(): SourceFilePath {\r\n    return this.$get('lib.entryFile');\r\n  }\r\n\r\n  public get cssUrl(): CssUrl {\r\n    return this.$get('lib.cssUrl');\r\n  }\r\n\r\n  public get umdModuleIds(): { [key: string]: string } {\r\n    return this.$get('lib.umdModuleIds');\r\n  }\r\n\r\n  public get jsxConfig(): string {\r\n    return this.$get('lib.jsx');\r\n  }\r\n\r\n  public get flatModuleFile(): string {\r\n    return this.$get('lib.flatModuleFile') || this.flattenModuleId('-');\r\n  }\r\n\r\n  public get styleIncludePaths(): string[] {\r\n    const includePaths = this.$get('lib.styleIncludePaths') || [];\r\n    return includePaths.map(\r\n      includePath => (path.isAbsolute(includePath) ? includePath : path.resolve(this.basePath, includePath))\r\n    );\r\n  }\r\n\r\n  public get languageLevel(): string[] {\r\n    return this.$get('lib.languageLevel');\r\n  }\r\n\r\n  /**\r\n   * The module ID is an \"identifier of a module used in the import statements, e.g.\r\n   * '@angular/core'. The ID often maps directly to a path on the filesystem, but this\r\n   * is not always the case due to various module resolution strategies.\"\r\n   */\r\n  public get moduleId(): string {\r\n    if (this.secondaryData) {\r\n      return this.secondaryData.moduleId;\r\n    } else {\r\n      return this.packageJson['name'];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The UMD module ID registers a module on the old-fashioned JavaScript global scope.\r\n   * Used by UMD bundles only.\r\n   * Example: `@my/foo/bar` registers as `global['my']['foo']['bar']`.\r\n   */\r\n  public get umdId(): string {\r\n    return this.$get('lib.umdId') || this.flattenModuleId();\r\n  }\r\n\r\n  /**\r\n   * The AMD ID reflects a named module that is distributed in the UMD bundles.\r\n   * @link http://requirejs.org/docs/whyamd.html#namedmodules\r\n   */\r\n  public get amdId(): string {\r\n    return this.$get('lib.amdId') || this.moduleId;\r\n  }\r\n\r\n  private flattenModuleId(separator: string = '.') {\r\n    if (this.moduleId.startsWith('@')) {\r\n      return this.moduleId\r\n        .substring(1)\r\n        .split('/')\r\n        .join(separator);\r\n    } else {\r\n      return this.moduleId.split('/').join(separator);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables the `\"sideEffects\": false` flag in `package.json`.\r\n   * The flag is enabled and set to `false` by default which results in more aggressive optimizations applied by webpack v4 builds consuming the library.\r\n   * To override the default behaviour, you need to set `\"sideEffects\": true` explicitly in your `package.json`.\r\n   *\r\n   * @link https://github.com/webpack/webpack/tree/master/examples/side-effects\r\n   */\r\n  public get hasSideEffects(): boolean {\r\n    return this.packageJson['sideEffects'] === true;\r\n  }\r\n}\r\n"]}