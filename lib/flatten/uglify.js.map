{"version":3,"file":"uglify.js","sourceRoot":"","sources":["../../../src/lib/flatten/uglify.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yCAAmC;AACnC,uCAA+C;AAC/C,+BAAgC;AAChC,uCAA4C;AAE5C,sBAAmC,SAAiB,EAAE,UAAmB;;QACvE,WAAK,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;QAEpC,MAAM,YAAY,GAAG,GAAG,UAAU,MAAM,CAAC;QACzC,MAAM,CAAC,eAAe,EAAE,oBAAoB,CAAC,GAAa,MAAM,OAAO,CAAC,GAAG,CAAC;YAC1E,mBAAQ,CAAC,SAAS,CAAC;YACnB,mBAAQ,CAAC,GAAG,SAAS,MAAM,CAAC;SAC7B,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,kBAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE;YAChD,SAAS,EAAE;gBACT,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;gBACpD,GAAG,EAAE,eAAQ,CAAC,YAAY,CAAC;aAC5B;YACD,KAAK,EAAE;gBACL,YAAY,EAAE,IAAI;aACnB;YACD,GAAG,EAAE,IAAI;YACT,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE;gBACN,QAAQ,EAAE,MAAM;aACjB;SACF,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC7C,UAAI,CAAC,cAAc,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,MAAM,MAAM,CAAC,KAAK,CAAC;QACrB,CAAC;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,oBAAS,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,oBAAS,CAAC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7F,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;CAAA;AArCD,oCAqCC","sourcesContent":["import { minify } from 'uglify-js';\r\nimport { writeFile, readFile } from 'fs-extra';\r\nimport { basename } from 'path';\r\nimport { debug, warn } from './../util/log';\r\n\r\nexport async function minifyJsFile(inputPath: string, outputPath?: string): Promise<string> {\r\n  debug(`minifyJsFile: ${inputPath}`);\r\n\r\n  const sourcemapOut = `${outputPath}.map`;\r\n  const [inputFileBuffer, inputSourceMapBuffer]: Buffer[] = await Promise.all([\r\n    readFile(inputPath),\r\n    readFile(`${inputPath}.map`)\r\n  ]);\r\n\r\n  const result = minify(inputFileBuffer.toString(), {\r\n    sourceMap: {\r\n      includeSources: true,\r\n      content: JSON.parse(inputSourceMapBuffer.toString()),\r\n      url: basename(sourcemapOut)\r\n    },\r\n    parse: {\r\n      bare_returns: true\r\n    },\r\n    ie8: true,\r\n    warnings: true,\r\n    output: {\r\n      comments: 'some'\r\n    }\r\n  });\r\n\r\n  if (result.warnings) {\r\n    for (const warningMessage of result.warnings) {\r\n      warn(warningMessage);\r\n    }\r\n  }\r\n\r\n  if (result.error) {\r\n    throw result.error;\r\n  }\r\n\r\n  await Promise.all([writeFile(outputPath, result.code), writeFile(sourcemapOut, result.map)]);\r\n  return outputPath;\r\n}\r\n"]}