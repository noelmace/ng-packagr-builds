{"version":3,"file":"external-module-id-strategy.js","sourceRoot":"","sources":["../../../src/lib/flatten/external-module-id-strategy.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAU7B;IACE,YAAoB,YAAiC,EAAU,cAA8B;QAAzE,iBAAY,GAAZ,YAAY,CAAqB;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAEjG,8DAA8D;IAC9D,oBAAoB,CAAC,QAAgB;QACnC,oEAAoE;QACpE,yFAAyF;QACzF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtF,uEAAuE;YACvE,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChD,EAAE,CAAC,CACD,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;YACtB,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAC9B,CAAC,CAAC,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,sBAAsB;QACpB,MAAM,EAAE,mBAAmB,GAAG,EAAE,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAE5E,qGAAqG;QACrG,qFAAqF;QACrF,qCAAqC;QAErC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,KAAK,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,GAAG,CAAC,CAAC,wBAAwB;QACtC,CAAC;QAED,wDAAwD;QACxD,MAAM,CAAC,CACL,YAAY;aACT,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aAE/C,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;IACJ,CAAC;CACF;AA9CD,4DA8CC","sourcesContent":["import * as path from 'path';\r\nimport * as rollup from 'rollup';\r\n\r\nexport interface DependencyList {\r\n  /** Direct dependencies including peerDependencies and other entry points. */\r\n  dependencies?: string[];\r\n  /** Direct bundled dependencies */\r\n  bundledDependencies?: string[];\r\n}\r\n\r\nexport class ExternalModuleIdStrategy {\r\n  constructor(private moduleFormat: rollup.ModuleFormat, private dependencyList: DependencyList) {}\r\n\r\n  /** Return true when moduleId is to be treated as external  */\r\n  isExternalDependency(moduleId: string): boolean {\r\n    // more information about why we don't check for 'node_modules' path\r\n    // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632\r\n    if (path.isAbsolute(moduleId) || moduleId.startsWith('.') || moduleId.startsWith('/')) {\r\n      // if it's either 'absolute', marked to embed, starts with a '.' or '/'\r\n      return false;\r\n    }\r\n\r\n    const externals = this.getBundledDependencies();\r\n    if (\r\n      Array.isArray(externals)\r\n        ? !externals.some(x => x === moduleId || moduleId.startsWith(`${x}/`))\r\n        : !externals.test(moduleId)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a array of strings or a RegExp of non-bundled dependencies.\r\n   */\r\n  getBundledDependencies(): string[] | RegExp {\r\n    const { bundledDependencies = [], dependencies = [] } = this.dependencyList;\r\n\r\n    // return catch all for when there are no 'bundledDependencies' is very important for secondary entry\r\n    // as if this is not the case everything will be bundled in the secondary entry point\r\n    // since no dependencies are defined.\r\n\r\n    if (this.moduleFormat !== 'umd' || !bundledDependencies.length) {\r\n      return /./; // catch all as external\r\n    }\r\n\r\n    // filter out dependencies that are meant to be external\r\n    return (\r\n      dependencies\r\n        .filter(x => bundledDependencies.indexOf(x) < 0)\r\n        // 'tslib' must always be external even if it's not in dependencies because it will be added later in the final step\r\n        .concat('tslib')\r\n    );\r\n  }\r\n}\r\n"]}