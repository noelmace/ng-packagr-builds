{"version":3,"file":"rollup.js","sourceRoot":"","sources":["../../../src/lib/flatten/rollup.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAiC;AACjC,0DAA0D;AAC1D,mDAAmD;AACnD,mCAAmC;AACnC,+EAAyF;AACzF,qEAA+D;AAmB/D,mEAAmE;AACnE,0BAAuC,IAAmB;;QACxD,GAAG,CAAC,KAAK,CAAC,YAAY,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAExF,MAAM,wBAAwB,GAAG,IAAI,sDAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAEhG,oBAAoB;QACpB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC;YACjC,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,QAAQ,CAAC;YAC7E,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;YACnE,MAAM,EAAE,OAAO,CAAC,EAAE;gBAChB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAChC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,mBAAmB,CAAC,CAAC,CAAC;wBACzC,MAAM,CAAC;oBACT,CAAC;oBAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;YACD,gBAAgB,EAAE,IAAI;SACvB,CAAC,CAAC;QAEH,4BAA4B;QAC5B,MAAM,MAAM,CAAC,KAAK,CAAC;YACjB,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC1B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,4CAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC;YAC3E,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CAAA;AAnCD,4CAmCC","sourcesContent":["import * as rollup from 'rollup';\r\nimport * as nodeResolve from 'rollup-plugin-node-resolve';\r\nimport * as commonJs from 'rollup-plugin-commonjs';\r\nimport * as log from '../util/log';\r\nimport { ExternalModuleIdStrategy, DependencyList } from './external-module-id-strategy';\r\nimport { umdModuleIdStrategy } from './umd-module-id-strategy';\r\nimport { TransformHook } from 'rollup';\r\n\r\n/**\r\n * Options used in `ng-packagr` for writing flat bundle files.\r\n *\r\n * These options are passed through to rollup.\r\n */\r\nexport interface RollupOptions {\r\n  moduleName: string;\r\n  entry: string;\r\n  format: rollup.ModuleFormat;\r\n  dest: string;\r\n  umdModuleIds?: { [key: string]: string };\r\n  amd?: { id: string };\r\n  transform?: TransformHook;\r\n  dependencyList?: DependencyList;\r\n}\r\n\r\n/** Runs rollup over the given entry file, writes a bundle file. */\r\nexport async function rollupBundleFile(opts: RollupOptions): Promise<void> {\r\n  log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest} (${opts.format})`);\r\n\r\n  const externalModuleIdStrategy = new ExternalModuleIdStrategy(opts.format, opts.dependencyList);\r\n\r\n  // Create the bundle\r\n  const bundle = await rollup.rollup({\r\n    context: 'this',\r\n    external: moduleId => externalModuleIdStrategy.isExternalDependency(moduleId),\r\n    input: opts.entry,\r\n    plugins: [nodeResolve(), commonJs(), { transform: opts.transform }],\r\n    onwarn: warning => {\r\n      if (typeof warning === 'string') {\r\n        log.warn(warning);\r\n      } else {\r\n        if (warning.code === 'THIS_IS_UNDEFINED') {\r\n          return;\r\n        }\r\n\r\n        log.warn(warning.message);\r\n      }\r\n    },\r\n    preserveSymlinks: true\r\n  });\r\n\r\n  // Output the bundle to disk\r\n  await bundle.write({\r\n    name: `${opts.moduleName}`,\r\n    file: opts.dest,\r\n    format: opts.format,\r\n    amd: opts.amd,\r\n    banner: '',\r\n    globals: moduleId => umdModuleIdStrategy(moduleId, opts.umdModuleIds || {}),\r\n    sourcemap: true\r\n  });\r\n}\r\n"]}