{"version":3,"file":"transform.di.js","sourceRoot":"","sources":["../../../src/lib/brocc/transform.di.ts"],"names":[],"mappings":";;AAoBA;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,0BAAiC,MAAyB;IACxD,MAAM,mBACD,MAAM,IACT,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE,IACvB;AACJ,CAAC;AALD,4CAKC","sourcesContent":["import { InjectionToken, FactoryProvider } from 'injection-js';\r\nimport { Transform } from './transform';\r\n\r\n/**\r\n * A specialized `FactoryProvider` for a `Transform`.\r\n */\r\nexport interface TransformProvider extends FactoryProvider {\r\n  /**\r\n   * An injection token for the `Transform` provided by this provider.\r\n   */\r\n  provide: InjectionToken<Transform>;\r\n\r\n  /**\r\n   * A function to invoke to create the `Transform`.\r\n   *\r\n   * The factory function is invoked with resolved values of tokens in the `deps` field.\r\n   */\r\n  useFactory: (...args: any[]) => Transform;\r\n}\r\n\r\n/**\r\n * Creates a provider for a `Transform`.\r\n *\r\n * #### Example\r\n *\r\n * Creating a transformation `fooBar` that is composed of `foo` and `bar` transforms:\r\n *\r\n * ```ts\r\n * const FOO_BAR_TOKEN = new InjectionToken<Transform>('fooBar');\r\n *\r\n * const FOO_BAR_TRANSFORM provideTransform({\r\n *   provide: FOO_BAR_TOKEN,\r\n *   useFactory: (foo, bar) => {\r\n *     return pipe(foo, bar);\r\n *   },\r\n *   deps: [ FOO_TOKEN, BAR_TOKEN ]\r\n * });\r\n * ```\r\n *\r\n * @param module The provider for the transform\r\n * @return A (normalized) provider for the transform\r\n */\r\nexport function provideTransform(module: TransformProvider): TransformProvider {\r\n  return {\r\n    ...module,\r\n    deps: module.deps || []\r\n  };\r\n}\r\n"]}