{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../../src/lib/brocc/transform.ts"],"names":[],"mappings":";;AAEA,6DAA0D;AAC1D,2CAAwD;AACxD,8CAAgD;AAChD,yCAAsC;AAqBzB,QAAA,oBAAoB,GAAG,CAAC,WAAkC,EAAa,EAAE,CACpF,WAAI,CACF,qBAAS,CAAC,KAAK,CAAC,EAAE;IAChB,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAE3C,EAAE,CAAC,CAAC,eAAe,YAAY,OAAO,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,yBAAW,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,OAAY,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;AACH,CAAC,CAAC,CACH,CAAC","sourcesContent":["import { MonoTypeOperatorFunction } from 'rxjs/interfaces';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { of as observableOf } from 'rxjs/observable/of';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { pipe } from 'rxjs/util/pipe';\r\nimport { BuildGraph } from './build-graph';\r\n\r\n/**\r\n * A tranformation applied over the build graph.\r\n *\r\n * By design, a pipeable operator over `BuildGraph`.\r\n *  - A transformation takes a `BuildGraph` as input (from previous transformations).\r\n *  - A transformation performs some operations based on the graph's data, potentially modifying nodes in the graph.\r\n *  - It returns a `BuildGraph` that will be passed to subsequent transformations.\r\n *\r\n * @link https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#pipeable-operators\r\n */\r\nexport interface Transform extends MonoTypeOperatorFunction<BuildGraph> {\r\n  (source$: Observable<BuildGraph>): Observable<BuildGraph>;\r\n}\r\n\r\nexport interface PromiseBasedTransform {\r\n  (graph: BuildGraph): Promise<BuildGraph | void> | BuildGraph | void;\r\n}\r\n\r\nexport const transformFromPromise = (transformFn: PromiseBasedTransform): Transform =>\r\n  pipe(\r\n    switchMap(graph => {\r\n      const transformResult = transformFn(graph);\r\n\r\n      if (transformResult instanceof Promise) {\r\n        return fromPromise(transformResult).pipe(map(result => (result ? result : graph)));\r\n      } else {\r\n        return observableOf(transformResult ? transformResult : graph);\r\n      }\r\n    })\r\n  );\r\n"]}